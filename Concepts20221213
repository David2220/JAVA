/*
.형상관리:
깃헙- 저장소 공유, 협업, 코드리뷰
리파지토리
Git init
add
Git push
Git pull
Branch
Commit
Clone
Sns남리포보는법 깃커뮤
호스팅: 깃데스크탑
터미널
Source tree
Notion
/

Html
Xml
​
.자바:

1.객체와 기본개념
객체: =클래스 인스턴스, 대상과 행동, 현실을 실현, 실제값, 결과
객체생성: 할당, new
new연산자: 클래스로 자료형 만들기, 해당 클래스에 접근가능
구조체: 내가 직접 만드는 데이터 타입
Struct: java의 구조체역할(자바 구조체 없음), import util.class명
식별자: 이름, $써도됨
시스템 정의 식별자: 예약어, 키워드
사용자 정의 식별자: 클래스명, 변수명, 메소드명 등
런타임: 실행 시간
컴파일: 기계어 번역 중
참조: reference
유효범위scope: 각 통용되는 범위
사본:
부프로그램:
2.패키지와 클래스, 메소드와 변수
패키지: 클래스 묶음, 컴파일에 폴더생성
서브 패키지: 패키지 안의 패키지
Default pakage: 소속없는 클래스가 포함되는 패키지
Bin: 컴파일된 클래스파일 묶음
Src: 자바 소스파일 묶음
클래스 패스: 클래스 파일 경로, 환경변수로 관리,
제어판>검색>환경변수>편집(변수명:클래스패스, 변수값: 경로),
컴파일시 옵션으로 설정하면 그 안 모든클래스(컴파일 완료 클래스) 참조가능(객체생성, 메소드 호출 등), 다른파일로 옮길 때 설정필요
환경 변수: 윈도우 설정정보 담긴변수, os어디서든 자바 인식하도록 설정
제대로 세팅한 Java실행파일 경로: jdk>bin
접근 제어자(=​제한자): public protected(전체x) default(자손+") private(패키지+"")
클래스: 결과(객체)를 위한 설계도, java소스파일 컴파일에 생성
클래스::변수명:
전역변수: 한 프로그램 안에서 다 접근가능, 모두 정적변수, 필드, 동명메소드 변수가 우선
지역변수: 메소드나 생성자 속에서 선언한 변수
메소드: =멤버함수
this: 필드변수를 메소드 안에서 쓸 수 있게함
3.생성자와 초기화
초기화: 무조건 실행되어야 하는 과정, 선언
(생성자: public원칙, 초기화하는 함수(메소드), 클래스명과 동일, 리턴없음, 오버로딩가능
-기본생성자: no매개변수, 따로없음jvm이 자동생성, 상속/매개변수생성자 만들때 필요
-매개변수생성자: )
4.동적/정적
동적: 프로그램이 실행 중인 상태에서 올라가는 거 ex)인스턴스 변수
스택: 동적 실행, 행위 후 소멸
heap: 동적(움직이고 소멸) 메모리 (저장)할당/소멸공간
정적: 실행이 안 되어도 할당될 수 있음, 계속 멈춘 것
?정적(static)변수:=클래스 변수, 인스턴스 생성과 상관없이 초기화, (클래스에서?)하나만 선언, 클래스 안에(한 가지? 그이상?) 꼭 속함, 클래스에서static붙음, 클래스 속성, 필드
클래스 메소드(이게뭐지?), (어디쓰이는지)
정적 초기화 블럭: static{}, 정적변수 초기화 한 번만
정적 멤버(=구성) =정적멤버, 클래스​메소드+정적변수
Garbage collection: 효율적인 메모리 공간을 위해 삭제하고 소멸한 정보를 수집한 쓰레기 수집
5.인스턴스
인스턴스 변수: 한 클래스 안에서 다 통용, 클래스 속성,
멤버=클래스=인스턴스 변수, 클래스(필드)에서 선언
인스턴스 메소드: 인스턴스 메소드에서 static변수/메소드 사용가능, 반대는 불가능​
인스턴스: 객체를 실체화=객체, 주로 클래스정도를 얘기하는듯, 99, 다른클래스에 사용가능
6.다형성
다형성: 여러가지 형태를 가질 수 있는 것>하나의 메소드/클래스가 다양한 방법으로 동작 ex)오버로딩, 오버라이딩
상속: 기존(부모)클래스+확장내용(extends)
조상없는 클은 최고조상object클 상속
포함: 한클래스 {다른클래스 멤버명;}
오버로딩: 매개변수 개수,타입같으면 같은 클래스내 같은이름 새 메서드 정의가능
오버라이딩: 상속받은 메소드 재정의, 더넓은접근제어자, 어노테이션
어노테이션: @, 기본개념
자식클래스에만 기술, 부모메소드와 이름다르면 에러발생(모든 어노테이션이?)
추상: 공통묶기, 다형성 보장을 위한 개념(자식클래스에서 반드시 재정의), private사용불가
추상클래스: 추상메소드 포함 클래스
추상메소드: 함수선언만, 구현부 없음 final
인터페이스: 추상메소드만 있고 구현메소드 없는 추상클래스,
7.재귀:
바인딩: 확정짓는 것, 메모리에 할당
generic
throw 책임전가
예외사슬
object
enum
collection
Getter,setter:
8.배열
2차 함수 파라미터: ​/*

.안드로이드 스튜디오, 앱
네이티브앱
웹앱
하이브리드앱
프로그레시브 웹앱
크로스플랫폼

Jsp
서블릿
Asp

Erp

.Node.js:
​
-이산수학:
.알고리즘: 효율성>단계수(ex)1.2.계산3.구했다)
시간복잡도: 처리데이터가 늘어날수록 얼마나 시간이 더 걸려지는지 나타내는 정도식
연산횟수, 많음 속도느림/적음 속도빠름
데이터수n에 대한 연산횟수 함수 T(n)
-점근적 표기법: 여러개의 다항식을 간단히 생략해 최악상황을 알아보고 비교하려는 입력n에 대한 함수
--BigO: 점근적 상한(가장 늦게실행)>최악이면 이정도 시간이 걸린다
O(1): 상수시간, 크기 상관없이(최악도) 일정시간, 데이터증가 영향x, 뭘 넣어 입력해도 같은단계에서 끝남 ex)push,pop
O(log n): 로그시간 ex)이진탐색, log2.16=16을 2^로 나타내기=4​
O(N): 선형시간, 입력이 증가>처리시간/메모리 사용 선형증가, 최악은 배열원소 개수만큼, 데이터증가수-단계 비례, 모든 입력값 적어도 한 번은 봄 ex)선형검색, for문
단계에 대한 이해, 입력수가 늘면 단계가 달라진다? 선형검색은 무엇인가, 정렬되지 않은 리스트에서 최대/최소찾기인가?​
O(n log n): 선형로그형​ ex)병합정렬
O(n^2): 2차시간 ex)버블정렬, 이중for문
O(C^n): 지수시간 ex)피보나치수 재귀계산
O(n!): ex)
faster O(1) < O(logN) < O(N) < O(NlogN) < O(n^2) < O(2^N) slower​
---시간복잡도 구하는 법: 컴퓨터는 1초에 대략 35억개 정도 연산처리 가능​
연산1회: 대입/반환
왜 for문 ex)2n-1<n은 n-i회 반복하는가?
i<n은 왜 n+1인가?
*/
알고리즘 빅오 찾기:
--오메가: 점근적 하한(가장 빨리실행)
--세타: 점근적 상한+하한(평균적 실행)
공간복잡도: 처리데이터가 늘어날수록 얼마나 더 메모리 공간이 필요해지는지 나타내는 정도식
시공 트레이드오프 관계: 빠르면 넓게, 느리면 좁게사용
문자열: 문자의 배열>수열적용
-문자열 검색(탐색): Trie, 이진탐색
배열: 1차 2차(중첩)
큐: 출입구 2개인 자료구조, 선입선출
스택:
해시맵
재귀
정렬
-이진탐색: 정렬된 데이터에서 정한값 찾기>인덱스첫+끝/2=인덱스선택(짝수면 계산한 거 반내림), 아니면 제외, 나눠진 데서 또 밑줄처럼 반복​
트리

Dfs
bfs
graph
dp(동적프로그래밍)
greedy(탐욕)
.자료구조:

-선형대수학:
​
.Db :
오라클​
Sql
Rdbms
​
. Cs:
1.- 네트워크(=인터넷)
RestfulAPI
MSA
이더넷: 네트워크 구성하는 컴퓨터 통신수단
W3c: 월드와이드웹표준
도메인: 물리컴퓨터 찾는 문자이름 주소, 일괄취급
Ip: 컴퓨터가 처리가능한 숫자 인터넷 주소
(Dns: 도메인을 ip로 바꾸는 시스템/서버, 네임서비스, tcp프로토콜, 포트53, dns서버조회(서버에요청,응답받음/이름, 클래스, 타입)
Dns resolver: 클라 요청받아 dns응답ip 전달하는 역할, 주로 dns에서 제공, 클라호스트엔 간단기능(stub resolver) 통해 네임서버(?)ip파악(os내부 소켓라이브러리 활용)>프로토콜 스택(?)호출, 메시지 전송>dns응답, 스택에서 resolver로 전달>웹으로 ip전달(하위서버ip 상위에 등록)
Local dns: pc가 ip물어봄, 없으면 root dns에 질의, ip주소 캐싱(한 번 저장하면 캐시에 저장>요청하면 바로 응답) 후 클라에 전달
Root dns: 전세계13대, 우리나라3대
Recursive query: local dns가 여러dns서버에 답을 찾는과정)
Socket: 한 물리컴퓨터에 여러sw가 각 데이터통신을 하는 수단
포트: 한 물리컴퓨터에서 sw서버/socket를 찾는 값, 0보다큼
( 프로토콜: 통신규약
신호 처리법, 오류처리, 암호, 인증, 주소
Tcp/ip: 인터넷 기반 프로토콜)
ftp: 파일전송, 연결안끊음(http랑 대조), 포트21
Ssh: shell 접근
Telnet: 터미널, 연안끊
Ssl: 소켓통신
Smtp/Pop3: 이메일 전송을 위한, 포트25/110​
Html: Hyper text
http: html전송/www(word wide web) 프로토콜,
브라우저 통한 웹서비스 기능,
클라이언트(요청, 브라우저)-서버(응답, 원격지 컴퓨터),
데이터 요청 독립관리, Stateless(연결끊으면 상태정보 유지×),
비연결식(응답전송 후 연결종료, 클라 매번인증), 80번 포트
요청(Http 요청메소드(Verbs): 데이터 요청+'동작수행'
Get요청 Post생성 Put변경 Delete삭제.
Head서버헤더획득 Option옵션확인요청
Cors:
Uri: 요청하는 자원 식별, 위치지정, url포함
Url: 서버에 자원요청 영문주소, 구체적 접근, 정확한 위치,
protocal+host+port+resource path+query ),
웹브라우저가 해독>전송위치판단>http로전송
Http상태코드: 서버에서 보내는 응답정보, 에러처리가능
2성공 3리다이렉션 4클라에러 5서버오류
쿠키: 클라 로컬에 저장(보안취약)한 키+값 파일, http무상태로 정보유지 위해 등장, 클라 상태정보 브라우저에 저장 후 참조,
요청>쿠키생성>응답(헤더)>브라우저저장>서버, 쿠키확인>응답, 속도빠름
세션: 브라우저 접속 때만 유지기술, 쿠키에 서버에서 부여한 id를 저장, 웹브라우저에 저장한 세션id담긴 쿠키 보내면 구분해 서버에서 관련처리, id만 클라, 서버에 내용저장(보안비교적좋음, 비교적처리속도느림)
세션id: 서버가 부여하는 클라고유id, 쿠키보다 저속(왜?)
응답헤더에 포함(쿠키에 저장됨)>http헤더전송?>서버 세션확인, 응답
(패킷: 응답할 때 정보를 실어보내는 작은조각
헤더: 보내는 사람 주소, 받는 사람 주소, ttl(time to live) 등
바디: 실제 전달 내용 )
크롬브라우저 검사기능: 웹 우클릭>검사>개발자도구 네트워크>웹 새로고침>리소스 클릭>패킷정보
https: tls를 통한 보안적용_
Dom: html,xml을 계층으로 나타내는 인터페이스
LAN: 근거리 통신망*/
라우터: 교통정리 라우터
Isa hasa
2.-서버:
서버: db연결됨, 정보집약체, 서버관리(항상전기공급, 철저한 보안시스템, 빠르고 안정적인 회선)
호스팅: 서버임대 서비스(일부/전체)
웹호스팅: 서버나눠씀/저렴,관리편함/사용가능 하드웨어 제한적
사용하드웨어란 뭔가?...
(-서버호스팅: 고객하나가 서버 다씀>대규모 기업)많은 데이터 사용/
넓은 하드웨어, 서버 직접 운영관리 권한있음, 빠른 데이터 전송속도/
높은비용)
(클라우드 서버: 가상서버
자원크기 조절가능, 유연/하나문제>연결문제)
아파치
Was: j2ee스펙구현 서버
Aws
클라우드 컴퓨팅
가상화: 컴퓨터 속 컴퓨터 구축

3.메모리
기본형 변수: 리터럴, 실제값
참조형 변수: 주소값
메모리 주소값: ​
매핑: 기억장치를 각각의 루틴이나 데이터 영역에 할당
주기억장치RAM: 휘발성, 속도, 기억용량 보통/
하드디스크로 일정데이터 복사, 임시저장>필요할 때 CPU에 빠르게 전달
레지스터: RAM과 캐시 속도차이 해결, 캐시계층
(캐시: CPU안의 작은 메모리, 휘발성, 속도가 빠르며 기억용량 적음, 내부버스>빠른속도
캐시계층: 속도차이 해결을 위한 계층 사이의 계층 ex)레지스터
다층캐시메모리: L1, L2, L3 지칭
캐시와 캐시계층은 다른건가?
캐시히트: 데이터가 캐시 안에서 발견, 처리속도 향상
캐시미스: 데이터가 캐시에 없음
(시간 지역성: 최근에 접근한 데이터에 또 접근하려는 특성
반복문: 시간지역성이 뛰어난 장치>계속 최근데이터접근)
공간 지역성: 근접데이터에 접근하려는 특성
--캐시매핑: 캐시히트를 위한 매핑
직접매핑: 간단구현 저성능, 메모리주소=캐시순서 일치
연관매핑:
집합연관매핑:
4.--웹브라우저 캐시
쿠키: 만료기한 있는 키값 저장소
(스토리지: 만료없는 키값저장소, html5지원 브라우저만 사용, 클라이언트에서만 수정가능
로컬: 10mb저장, 웹브라우저 닫아도 유지, 도메인단위로 저장생성
세션: 5mb저장, 탭단위로 만들어지면 닫으면 삭제)
Db캐싱계층: 메인 위 레디스 디비계층, 성능 향상
보조기억장치(HDD, SSD): 휘발성, 속도낮고 기억용량 많다
-웹브라우저
예시: 크롬, 익스플로어(오픈소스 브라우저 존재)
기능: 사용자가 자원요청하면 서버가 보내서 해석하고 표시
w3c명세 따라 해석
자원: 주로 html문서, 가끔 다른형식(이미지, 등), url은 자원주소
(구성요소:
ui: 화면구성, url표시줄 등(어디까지?)
browser engine: 위아래 둘 제어, webdb에 쿠키 등 모든자원 저장
(rendering engine: 요청 콘텐츠(html,xml) 파싱(필요부분추출) 후 표시>플러그인, 브라우저 확장기능으로 pdf같은 유형 표시
세부동작: Dom트리변환>...
Ex) 파이어폭스-게코, 사파리-웹킷(리눅스 위해 만들어진 오픈소스, 애플이 os호환 때문에 수정))
통신: http...
js해석
백ui: os(ui)사용, 콤보박스...
Webdb: 쿠키+모든자원 저장)
(동작과정:
)
-나중에
쓰레드, 파일io
트래픽
5.-Os:
*-리눅스
/웹실행 기초지식
서버 로그 보기:
커널:
-aws free tier ec2
-유닉스
6.프로세스
CPU: 중앙처리장치, 내부 버스기반으로 작동
시스템 버스
7.프레임워크: Springboot
​
연결짓기: 다 연결되어있다
웹---------
F: html-css-js
B: 알고리즘-java(언어)-db(sql>oracle) cs(서버-네트워크-메모리)
springboot(프워)​​

기타/보류:
관련수학-선형대,이산수학​
인터넷 회선:
아두이노
다운되는 이유
자동완성
java.exe
엔트리 포인트
다중창구기능
도형기능
망기능
워크스테이션
메타데이터
Notion
Docker
변경사항: 오늘 처음(알고리즘, 메모리 부분)
*/
-------------
질문창

Q1. static field 안에 메소드 사용 불가능?
